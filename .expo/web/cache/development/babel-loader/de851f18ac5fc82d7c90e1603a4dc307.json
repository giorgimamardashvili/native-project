{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = {\n  cartItems: [],\n  cartTotalQty: 0,\n  cartTotalAmount: 0\n};\nexport var cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    addItem: function addItem(state, action) {\n      var itemIndex = state.cartItems.findIndex(function (item) {\n        return item.id === action.payload.id;\n      });\n\n      if (itemIndex >= 0) {\n        state.cartItems[itemIndex].cartQty += 1;\n      } else {\n        var tempProduct = _objectSpread(_objectSpread({}, action.payload), {}, {\n          cartQty: 1\n        });\n\n        state.cartItems.push(tempProduct);\n      }\n    },\n    removeItem: function removeItem(state, action) {\n      var nextCartItems = state.cartItems.filter(function (cartItem) {\n        return cartItem.id !== action.payload.id;\n      });\n      state.cartItems = nextCartItems;\n    },\n    decreaseCart: function decreaseCart(state, action) {\n      var itemIndex = state.cartItems.findIndex(function (cartItem) {\n        return cartItem.id === action.payload.id;\n      });\n\n      if (state.cartItems[itemIndex].cartQty === 1) {\n        return;\n      }\n\n      if (state.cartItems[itemIndex].cartQty > 1) {\n        state.cartItems[itemIndex].cartQty -= 1;\n      }\n    },\n    getTotals: function getTotals(state, action) {\n      var _state$cartItems$redu = state.cartItems.reduce(function (cartTotal, cartItem) {\n        var original_price = cartItem.original_price,\n            cartQty = cartItem.cartQty;\n        var itemTotal = original_price * cartQty;\n        cartTotal.total += itemTotal;\n        cartTotal.quantity += cartQty;\n        return cartTotal;\n      }, {\n        total: 0,\n        quantity: 0\n      }),\n          total = _state$cartItems$redu.total,\n          quantity = _state$cartItems$redu.quantity;\n\n      state.cartTotalQty = quantity;\n      state.cartTotalAmount = total;\n    }\n  }\n});\nvar _cartSlice$actions = cartSlice.actions,\n    addItem = _cartSlice$actions.addItem,\n    removeItem = _cartSlice$actions.removeItem,\n    decreaseCart = _cartSlice$actions.decreaseCart;\nexport { addItem, removeItem, decreaseCart };\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/overlord/Desktop/Work/native-project/src/redux/reducers/cartItems.js"],"names":["createSlice","initialState","cartItems","cartTotalQty","cartTotalAmount","cartSlice","name","reducers","addItem","state","action","itemIndex","findIndex","item","id","payload","cartQty","tempProduct","push","removeItem","nextCartItems","filter","cartItem","decreaseCart","getTotals","reduce","cartTotal","original_price","itemTotal","total","quantity","actions","reducer"],"mappings":"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","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\nconst initialState = {\r\n  cartItems: [],\r\n  cartTotalQty: 0,\r\n  cartTotalAmount: 0,\r\n};\r\n\r\nexport const cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem: (state, action) => {\r\n      const itemIndex = state.cartItems.findIndex(\r\n        (item) => item.id === action.payload.id\r\n      );\r\n      if (itemIndex >= 0) {\r\n        state.cartItems[itemIndex].cartQty += 1;\r\n      } else {\r\n        const tempProduct = { ...action.payload, cartQty: 1 };\r\n        state.cartItems.push(tempProduct);\r\n      }\r\n    },\r\n    removeItem: (state, action) => {\r\n      const nextCartItems = state.cartItems.filter(\r\n        (cartItem) => cartItem.id !== action.payload.id\r\n      );\r\n      state.cartItems = nextCartItems;\r\n    },\r\n    decreaseCart(state, action) {\r\n      const itemIndex = state.cartItems.findIndex(\r\n        (cartItem) => cartItem.id === action.payload.id\r\n      );\r\n\r\n      if (state.cartItems[itemIndex].cartQty === 1) {\r\n        return;\r\n      }\r\n      if (state.cartItems[itemIndex].cartQty > 1) {\r\n        state.cartItems[itemIndex].cartQty -= 1;\r\n      }\r\n    },\r\n    getTotals(state, action) {\r\n      let { total, quantity } = state.cartItems.reduce(\r\n        (cartTotal, cartItem) => {\r\n          const { original_price, cartQty } = cartItem;\r\n          const itemTotal = original_price * cartQty;\r\n\r\n          cartTotal.total += itemTotal;\r\n          cartTotal.quantity += cartQty;\r\n\r\n          return cartTotal;\r\n        },\r\n        {\r\n          total: 0,\r\n          quantity: 0,\r\n        }\r\n      );\r\n\r\n      state.cartTotalQty = quantity;\r\n      state.cartTotalAmount = total;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addItem, removeItem, decreaseCart } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}