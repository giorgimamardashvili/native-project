{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { createSlice } from \"@reduxjs/toolkit\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nvar initialState = {\n  cartItems: AsyncStorage.getItem(\"cartItems\") ? JSON.parse(JSON.stringify(AsyncStorage.getItem(\"cartItems\"))) : [],\n  cartTotalQty: 0,\n  cartTotalAmount: 0\n};\nexport var cartSlice = createSlice({\n  name: \"cart\",\n  initialState: initialState,\n  reducers: {\n    addItem: function addItem(state, action) {\n      var itemIndex = state.cartItems.findIndex(function (item) {\n        return item.id === action.payload.id;\n      });\n\n      if (itemIndex >= 0) {\n        state.cartItems[itemIndex].cartQty += 1;\n      } else {\n        var tempProduct = _objectSpread(_objectSpread({}, action.payload), {}, {\n          cartQty: 1\n        });\n\n        state.cartItems.push(tempProduct);\n      }\n\n      AsyncStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\n    },\n    removeItem: function removeItem(state, action) {\n      console.log(state, action);\n    }\n  }\n});\nvar _cartSlice$actions = cartSlice.actions,\n    addItem = _cartSlice$actions.addItem,\n    removeItem = _cartSlice$actions.removeItem;\nexport { addItem, removeItem };\nexport default cartSlice.reducer;","map":{"version":3,"sources":["C:/Users/overlord/Desktop/Work/native-project/src/redux/reducers/cartItems.js"],"names":["createSlice","AsyncStorage","initialState","cartItems","getItem","JSON","parse","stringify","cartTotalQty","cartTotalAmount","cartSlice","name","reducers","addItem","state","action","itemIndex","findIndex","item","id","payload","cartQty","tempProduct","push","setItem","removeItem","console","log","actions","reducer"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,OAAOC,YAAP,MAAyB,2CAAzB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,SAAS,EAAEF,YAAY,CAACG,OAAb,CAAqB,WAArB,IACPC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,YAAY,CAACG,OAAb,CAAqB,WAArB,CAAf,CAAX,CADO,GAEP,EAHe;AAInBI,EAAAA,YAAY,EAAE,CAJK;AAKnBC,EAAAA,eAAe,EAAE;AALE,CAArB;AAQA,OAAO,IAAMC,SAAS,GAAGV,WAAW,CAAC;AACnCW,EAAAA,IAAI,EAAE,MAD6B;AAEnCT,EAAAA,YAAY,EAAZA,YAFmC;AAGnCU,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE,iBAACC,KAAD,EAAQC,MAAR,EAAmB;AAC1B,UAAMC,SAAS,GAAGF,KAAK,CAACX,SAAN,CAAgBc,SAAhB,CAChB,UAACC,IAAD;AAAA,eAAUA,IAAI,CAACC,EAAL,KAAYJ,MAAM,CAACK,OAAP,CAAeD,EAArC;AAAA,OADgB,CAAlB;;AAGA,UAAIH,SAAS,IAAI,CAAjB,EAAoB;AAClBF,QAAAA,KAAK,CAACX,SAAN,CAAgBa,SAAhB,EAA2BK,OAA3B,IAAsC,CAAtC;AACD,OAFD,MAEO;AACL,YAAMC,WAAW,mCAAQP,MAAM,CAACK,OAAf;AAAwBC,UAAAA,OAAO,EAAE;AAAjC,UAAjB;;AACAP,QAAAA,KAAK,CAACX,SAAN,CAAgBoB,IAAhB,CAAqBD,WAArB;AACD;;AAEDrB,MAAAA,YAAY,CAACuB,OAAb,CAAqB,WAArB,EAAkCnB,IAAI,CAACE,SAAL,CAAeO,KAAK,CAACX,SAArB,CAAlC;AACD,KAbO;AAcRsB,IAAAA,UAAU,EAAE,oBAACX,KAAD,EAAQC,MAAR,EAAmB;AAC7BW,MAAAA,OAAO,CAACC,GAAR,CAAYb,KAAZ,EAAmBC,MAAnB;AACD;AAhBO;AAHyB,CAAD,CAA7B;AAuBA,yBAAgCL,SAAS,CAACkB,OAA1C;AAAA,IAAQf,OAAR,sBAAQA,OAAR;AAAA,IAAiBY,UAAjB,sBAAiBA,UAAjB;;AAEP,eAAef,SAAS,CAACmB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nconst initialState = {\r\n  cartItems: AsyncStorage.getItem(\"cartItems\")\r\n    ? JSON.parse(JSON.stringify(AsyncStorage.getItem(\"cartItems\")))\r\n    : [],\r\n  cartTotalQty: 0,\r\n  cartTotalAmount: 0,\r\n};\r\n\r\nexport const cartSlice = createSlice({\r\n  name: \"cart\",\r\n  initialState,\r\n  reducers: {\r\n    addItem: (state, action) => {\r\n      const itemIndex = state.cartItems.findIndex(\r\n        (item) => item.id === action.payload.id\r\n      );\r\n      if (itemIndex >= 0) {\r\n        state.cartItems[itemIndex].cartQty += 1;\r\n      } else {\r\n        const tempProduct = { ...action.payload, cartQty: 1 };\r\n        state.cartItems.push(tempProduct);\r\n      }\r\n\r\n      AsyncStorage.setItem(\"cartItems\", JSON.stringify(state.cartItems));\r\n    },\r\n    removeItem: (state, action) => {\r\n      console.log(state, action);\r\n    },\r\n  },\r\n});\r\n\r\nexport const { addItem, removeItem } = cartSlice.actions;\r\n\r\nexport default cartSlice.reducer;\r\n"]},"metadata":{},"sourceType":"module"}